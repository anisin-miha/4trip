"use client";

import { useEffect, useRef, useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Calendar } from "@/components/ui/calendar";
import { ru } from "date-fns/locale";
import { CalendarIcon } from "lucide-react";
import { toast } from "sonner";
import { InputMask } from "@react-input/mask";
import { Controller } from "react-hook-form";

// ---- –î–ê–ù–ù–´–ï ----
const availableDates = [
  new Date(2025, 4, 3),
  new Date(2025, 4, 4),
  new Date(2025, 4, 10),
  new Date(2025, 4, 11),
  new Date(2025, 4, 17),
  new Date(2025, 4, 18),
  new Date(2025, 4, 24),
  new Date(2025, 4, 25),
  new Date(2025, 4, 31),
];

// ---- –í–ê–õ–ò–î–ê–¶–ò–Ø —á–µ—Ä–µ–∑ zod ----
const bookingSchema = z.object({
  name: z.string().optional().refine((val) => !val || val.length >= 2, {
    message: "–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤",
  }),
  phone: z.string().nonempty("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞").refine((val) => {
    // –£–±–∏—Ä–∞–µ–º –≤—Å—ë –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const digits = val.replace(/\D/g, "");
    return digits.length === 11; // –î–ª—è –†–æ—Å—Å–∏–∏: 11 —Ü–∏—Ñ—Ä (+7 –∏ 10 —Ü–∏—Ñ—Ä –Ω–æ–º–µ—Ä–∞)
  }, {
    message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
  }),
  email: z.string().optional().refine((val) => !val || /\S+@\S+\.\S+/.test(val), {
    message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email",
  }),
  date: z.string().nonempty("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"),
  people: z
    .string()
    .refine((val) => {
      const num = parseInt(val, 10);
      return !isNaN(num) && num >= 1;
    }, {
      message: "–ú–∏–Ω–∏–º—É–º 1 —á–µ–ª–æ–≤–µ–∫",
    }),
  consent: z.literal(true, {
    errorMap: () => ({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö" }),
  }),
});

z.setErrorMap((issue, ctx) => {
  switch (issue.code) {
    case "invalid_type":
      if (issue.received === "undefined") {
        return { message: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ" };
      }
      break;
  }
  return { message: ctx.defaultError };
});

type BookingFormValues = z.infer<typeof bookingSchema>;

interface BookingFormProps {
  price: number;
  tourName: string;
}

// ---- –û–¢–ü–†–ê–í–ö–ê ----
async function sendMessageToTelegram(
  name: string,
  phone: string,
  email: string,
  date: string,
  people: number,
  tourName: string,
) {
  await fetch("https://your-api.com/api/send", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      message: `
  üì© <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>
  üë§ –ò–º—è: ${name}
  üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
  üìß Email: ${email}
  üìÖ –î–∞—Ç–∞: ${date}
  üë• –ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫: ${people}
  üö© –¢—É—Ä: ${tourName}
      `.trim()
    }),
  });
}

// ---- BookingCalendar ----
const BookingCalendar: React.FC<{
  date: string | undefined;
  onChange: (date: string) => void;
}> = ({ date, onChange }) => {
  const [open, setOpen] = useState(false);
  const wrapperRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (wrapperRef.current && !wrapperRef.current.contains(event.target as Node)) {
        setOpen(false);
      }
    }
    function handleEscape(event: KeyboardEvent) {
      if (event.key === "Escape") {
        setOpen(false);
      }
    }

    document.addEventListener("mousedown", handleClickOutside);
    document.addEventListener("keydown", handleEscape);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
      document.removeEventListener("keydown", handleEscape);
    };
  }, []);

  return (
    <div className="relative mb-2" ref={wrapperRef}>
      <label htmlFor="date" className="block mb-2 font-semibold">
        –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É
      </label>

      <button
        type="button"
        onClick={() => setOpen(!open)}
        className="w-full px-4 py-2 border rounded-lg text-left bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 flex items-center justify-between"
      >
        <span>
          {date ? new Date(date).toLocaleDateString("ru-RU") : "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É"}
        </span>
        <CalendarIcon className="w-5 h-5 text-gray-500 ml-2" />
      </button>

      {open && (
        <div className="absolute z-10 mt-2 bg-white border rounded-lg p-2 shadow-md">
          <Calendar
            mode="single"
            weekStartsOn={1}
            selected={date ? new Date(date) : undefined}
            onSelect={(selected) => {
              if (selected) {
                onChange(selected.toISOString());
                setOpen(false);
              }
            }}
            disabled={(day) =>
              !availableDates.some(
                (available) => available.toDateString() === day.toDateString()
              )
            }
            locale={ru}
          />
        </div>
      )}
    </div>
  );
};

// ---- BookingForm ----
export default function BookingForm({ price, tourName }: BookingFormProps) {
  const [sent, setSent] = useState(false);

  const {
    control,
    register,
    handleSubmit,
    setValue,
    watch,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<BookingFormValues>({
    resolver: zodResolver(bookingSchema),
    defaultValues: {
      people: "1",
      consent: false,
    },
  });

  const date = watch("date");
  const people = watch("people") || 1;
  const totalPrice = price * people;

  const onSubmit = async (data: BookingFormValues) => {
    try {
      const formattedDate = new Date(data.date).toLocaleDateString("ru-RU", {
        day: "numeric",
        month: "long",
        year: "numeric",
      });

      await sendMessageToTelegram(
        data.name,
        data.phone,
        data.email || "",
        formattedDate,
        data.people,
        tourName
      );

      setSent(true);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  };

  const handleReset = () => {
    reset();
    setSent(false);
  };

  if (sent) {
    return (
      <div className="text-center space-y-6">
        <p className="text-xl font-semibold text-green-700">
          ‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
        </p>
        <p className="text-gray-600">–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
        <button
          onClick={handleReset}
          className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition font-semibold"
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É
        </button>
      </div>
    );
  }

  return (
    <section id="booking" className="py-16 bg-white scroll-mt-16">
      <div className="container mx-auto px-4">
        <h2 className="text-3xl font-bold text-center mb-4">–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –º–µ—Å—Ç–æ</h2>
        <p className="text-center mb-8">
          –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –≤–∞—à—É –±—Ä–æ–Ω—å
        </p>

        <div className="max-w-md mx-auto bg-white p-8 rounded-lg shadow-md">
          <form onSubmit={handleSubmit(onSubmit)}>
            {/* –ò–º—è */}
            <div className="mb-4">
              <label htmlFor="name" className="block mb-2 font-semibold">–ò–º—è</label>
              <input
                id="name"
                {...register("name")}
                className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
              />
              {errors.name && <p className="text-red-500 text-sm">{errors.name.message}</p>}
            </div>

            {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
            <div className="mb-4">
              <label htmlFor="phone" className="block mb-2 font-semibold">–¢–µ–ª–µ—Ñ–æ–Ω</label>

              <Controller
                name="phone"
                control={control}
                render={({ field: { onChange, value, ref, ...rest } }) => (
                  <InputMask
                    id="phone"
                    mask="+7 (___) ___-__-__"
                    replacement={{ _: /\d/ }}
                    showMask
                    value={value ?? ""}
                    onChange={onChange}
                    ref={ref}
                    {...rest}
                    track={(trackingData) => {
                      const { inputType, data } = trackingData;

                      if (inputType === 'insert' && data && data.length > 1) {
                        let digits = data.replace(/\D/g, "");

                        if (digits.length === 11) {
                          if (digits.startsWith("8")) {
                            digits = digits.substring(1);
                          } else if (digits.startsWith("7")) {
                            digits = digits.substring(1);
                          }
                        }

                        return digits;
                      }

                      return undefined;
                    }}
                    className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
                  />
                )}
              />


              {errors.phone && <p className="text-red-500 text-sm">{errors.phone.message}</p>}
            </div>

            {/* Email */}
            <div className="mb-4">
              <label htmlFor="email" className="block mb-2 font-semibold">Email</label>
              <input
                id="email"
                {...register("email")}
                className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
              />
              {errors.email && <p className="text-red-500 text-sm">{errors.email.message}</p>}
            </div>

            {/* –î–∞—Ç–∞ */}
            <div className="mb-4">

              <BookingCalendar
                date={date}
                onChange={(value) => setValue("date", value)}
              />
              {errors.date && <p className="text-red-500 text-sm">{errors.date.message}</p>}
            </div>

            {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ */}
            <div className="mb-4">
              <label htmlFor="people" className="block mb-2 font-semibold">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫</label>
              <input
                id="people"
                type="number"
                {...register("people", {
                  onChange: (e) => {
                    const onlyNumbers = e.target.value.replace(/\D/g, "");
                    e.target.value = onlyNumbers;
                  },
                  onBlur: (e) => {
                    const value = parseInt(e.target.value, 10);
                    if (!value || value < 1) {
                      e.target.value = "1";
                    }
                  },
                })}
                className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-600"
              />

              {errors.people && <p className="text-red-500 text-sm">{errors.people.message}</p>}
            </div>

            {/* –ß–µ–∫–±–æ–∫—Å —Å–æ–≥–ª–∞—Å–∏—è */}
            <div className="mb-6">
              <div className="flex items-start space-x-2 ">
                <input
                  id="consent"
                  type="checkbox"
                  {...register("consent")}
                  className="w-5 h-5 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                />
                <label htmlFor="consent" className="text-sm text-gray-700">
                  –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å{" "}
                  <a
                    href="/privacy-policy"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-600 underline hover:text-blue-800"
                  >
                    –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                  </a>
                  .
                </label>

              </div>
              {errors.consent && <p className="text-red-500 text-sm">{errors.consent.message}</p>}
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ */}
            <button
              type="submit"
              disabled={isSubmitting}
              className={`w-full bg-blue-600 text-white px-6 py-3 rounded-lg transition duration-300 font-semibold ${isSubmitting ? "opacity-50 cursor-not-allowed" : "hover:bg-blue-700"
                }`}
            >
              {isSubmitting ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"}
            </button>

            {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å */}
            <div className="mt-6 text-center text-xl font-semibold text-gray-900">
              –ò—Ç–æ–≥–æ: {totalPrice.toLocaleString("ru-RU")} ‚ÇΩ
            </div>
          </form>
        </div>
      </div>
    </section>
  );
}
